#include "cache.h"

uint64_t freqs[LLC_SET][LLC_WAY];

// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    for(uint32_t i=0; i < LLC_SET; i++){
        for( uint32_t j = 0; j < LLC_WAY; j++){
            freqs[i][j] = 0;
        }
    }
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
// baseline LFRU
    uint32_t way = 0;

    // fill invalid line first
    for (way=0; way<NUM_WAY; way++) {
        if (block[set][way].valid == false) {

            DP ( if (warmup_complete[cpu]) {
            cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " invalid set: " << set << " way: " << way;
            cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
            cout << dec << " lru: " << block[set][way].lru << endl; });

            break;
        }
    }

    uint64_t min_freq = freqs[set][0];
    uint32_t max_lru = block[set][0].lru;

    // LFRU victim
    if (way == NUM_WAY) {

        for ( uint32_t j = 0 ; j < LLC_WAY ; j++ ){
            if ( freqs[set][j] <= min_freq ){
                min_freq = freqs[set][j];
                max_lru = block[set][j].lru;
                //way = j;
            }
        }

        //for all ties in lfu, find the one with the highest LRU
        for(uint32_t k=0; k<LLC_WAY; k++){
            if(freqs[set][k] == min_freq){
                if(block[set][k].lru >= max_lru){
                    max_lru = block[set][k].lru;
                    way = k;
                }
            }
        }
        

                DP ( if (warmup_complete[cpu]) {
                cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " replace set: " << set << " way: " << way;
                cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
                cout << dec << " lru: " << block[set][way].lru << endl; });
    }



    if (way == NUM_WAY) {
        cerr << "[" << NAME << "] " << __func__ << " no victim! set: " << set << endl;
        assert(0);
    }

    return way;

}

void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;

    if (hit && (type == WRITEBACK)){// writeback hit does not update LRU state but updates the LFU state
        freqs[set][way]++;
    }else if(hit){              //other hits update both states
        freqs[set][way]++;
        lru_update(set,way);
    }else{
        freqs[set][way] = 0;        //a miss initializes lfu to 0 and updates lru using the function defined
        lru_update(set,way);
    }
    return;
}


void CACHE::llc_replacement_final_stats()
{

}